name: Rewrite New Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  prepare_env:
    name: Prepare Environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22' ]

    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
      MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_INSTANCE_ID: ${{ secrets.AWS_INSTANCE_ID }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
      ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Create configuration yaml file
        run: |
          cat <<EOF > config.yml
          app:
            server:
              host: "localhost"
              port: "8080"
              timeout:
                server: 30
                read: 15
                write: 10
                idle: 5
            mysql:
              host: "${{ env.MYSQL_HOST }}"
              port: "${{ env.MYSQL_PORT }}"
              username: "${{ env.MYSQL_USERNAME }}"
              password: "${{ secrets.MYSQL_PASSWORD }}"
              database: "${{ secrets.MYSQL_DATABASE }}"
            aws:
              accessKeyID: "${{ env.AWS_ACCESS_KEY_ID }}"
              secretAccessKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              region: "${{ secrets.AWS_REGION }}"
            redis:
              host: "${{ env.REDIS_HOST }}"
              port: "6379"
              minIddleConns: 200
              poolSize: 12000
              poolTimeout: 1400
              password: "${{ secrets.REDIS_PASSWORD }}"
              db: 0
            algolia:
              appID: "${{ env.ALGOLIA_APP_ID }}"
              apiKey: "${{ env.ALGOLIA_API_KEY }}"
          EOF

      - name: Create .env file
        run: |
          cat <<EOF > ./files/env/.env
          SCHEDULER_UPDATE_BOOK_STATUS="@daily"
          SCHEDULER_REFRESH_CACHE_REDIS="@hourly"
          SCHEDULER_LOG_TEST="*/10 * * * * *"
          SCHEDULER_DELETE_FILE="* * */1 * * *"
          PASSWORD_DEFAULT="library_1234"
          SERVER_TIMEOUT=30
          REDIS_EXPIRATION=600
          EOF

      - name: Install Mockery v2.43.1
        run: |
          go install github.com/vektra/mockery/v2/...@v2.43.1
          export PATH=$PATH:$(go env GOPATH)/bin

      - name: Cache Mockery Binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/mockery
          key: ${{ runner.os }}-mockery-v2.43.1

      - name: Install Mockery if not cache
        run: |
          if [ ! -f ~/.cache/mockery/mockery ]; then
            go install github.com/vektra/mockery/v2/...@v2.43.1
            mkdir -p ~/.cache/mockery
            cp $(go env GOPATH)/bin/mockery ~/.cache/mockery/
          fi

  test:
    name: Test the code
    runs-on: ubuntu-latest
    needs: prepare_env
    strategy:
      matrix:
        go-version: [ '1.22' ]

    steps:
      - name: Restore Mockery Binary
        uses: actions/cache@v2
        with:
          path: ~/.cache/mockery
          key: ${{ runner.os }}-mockery-v2.43.1

      - name: Add Mockery to PATH
        run: |
          export PATH=$PATH:~/.cache/mockery

      - name: Execute unit test
        run: |
          mockery --all --keeptree
          go test -coverprofile=coverage.out ./... ;    go tool cover -html=coverage.out

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

  build:
    name: Build the app
    runs-on: ubuntu-latest
    needs: prepare_env
    strategy:
      matrix:
        go-version: [ '1.22' ]

    steps:
      - name: Build the app
        run: |
          go version
          go mod tidy
          go build -o bin/library_app/http ./cmd/library_app/http/main.go

      - name: Zip the build
        run: |
          zip deployment.zip library_app config.yml